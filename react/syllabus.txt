*** Reactjs Syllabus ***

- Steps to create github account and new repository.

Step 1: Create a GitHub Account:
    a. Go to GitHub: Visit https://github.com.
    b. Sign Up: Click on the "Sign up" button in the top-right corner.
    c. Fill in Details: Enter your email, password, and username, then click "Create account".
    d. Verify Email: GitHub will send you an email to verify your account. Follow the instructions to verify it.

Step 2: Create Your First Repository:
    a. Login to GitHub: After verifying, log in to your GitHub account.
    b. Create a Repository:
        - Click on the “+” icon in the top-right corner and choose “New repository”.
        - Name your repository (e.g., "my-project").
        - Choose if the repo should be public or private.
        - Initialize with README: (optional) You can check this option to create a README file automatically.
        - Click Create repository.

Step 3: Install Git on Windows:
    a. Download Git:
        - Go to https://git-scm.com/download/win and download the latest version of Git for Windows.
    b. Install Git:
        - Run the installer.
        - During the setup, choose Git Bash (which is a terminal) when asked about the default terminal to use with Git.
        - You can leave the rest of the options as default.
    c. Verify Installation:
        - Open Git Bash from the Start Menu or search it in the Windows search bar.
        - Run the following command to ensure Git is installed:
            `git --version`

(Skip this if you are using Windows)
Step 3: Install Git on macOS using Homebrew:
    a. Install Homebrew (if not already installed):
        - Open Terminal and run:
            `/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"`
        - After installation, run:
            `brew install git`
        - Verify Git Installation: Check if Git is installed correctly:
            `git --version`

Step 4: Set Up Git on Your Local System:
    a. Configure Git:
        - Open Git Bash (or Terminal if using macOS) and run these commands to configure your user details:
            `git config --global user.name "Your Name"`
            `git config --global user.email "youremail@example.com"`

Step 5: Link Your Local Folder to GitHub Repo:
    a. Go to your Project Folder:
        - On Windows, open File Explorer and navigate to the folder where your project is stored.
        - Right-click inside the folder and select Git Bash Here to open the terminal in your project directory.
    b. Initialize Git in the Folder:
        - In Git Bash, run the following command to initialize Git in your folder:
            `git init`
    c. Link to GitHub Repository:
        - In Git Bash, link your local folder to the GitHub repository by running:
            `git remote add origin https://github.com/yourusername/my-project.git`
    d. Stage Your Files:
        - To add your files to Git, run:
            `git add .`
    e. Commit the Files:
        - Commit the changes locally:
            `git commit -m "Initial commit"`
    f. Push to GitHub:
        - Push the committed files to GitHub:
            `git push -u origin master`

 - Introduction to React:

1. What is React? (Doc: https://create-react-app.dev/docs/getting-started)
    a. Introduction: React is a free and open-source front-end JavaScript library for building user interfaces based on components.
    b. Developed by: It is by Facebook/Meta.
    c. Latest version: v18.2.0.
    d. Why react?
        - Improved performance: React uses Virtual DOM, thereby creating web applications faster. Virtual DOM compares the components’ previous states and updates only the items in the Real DOM that were changed, instead of updating all of the components again, as conventional web applications do.
        - Reusable components: Components are the building blocks of any React application, and a single app usually consists of multiple components. These components have their logic and controls, and they can be reused throughout the application, which in turn dramatically reduces the application’s development time.
        - Small learning curve: React is easy to learn, as it mostly combines basic HTML and JavaScript concepts with some beneficial additions. Still, as is the case with other tools and frameworks, you have to spend some time to get a proper understanding of React’s library.
        - It can be used for the development of both web and mobile apps: We already know that React is used for the development of web applications, but that’s not all it can do. There is a framework called React Native, derived from React itself, that is hugely popular and is used for creating beautiful mobile applications. So, in reality, React can be used for making both web and mobile applications.

2. Setting up React Environment - Installing Node.js, npm, and creating a React app using create-react-app
    a. Install and check version of:
        i. Node
        ii. npm
    b. How to create react app: npx create-react-app {my-app}
    c. Directory structure
        my-app
        ├── README.md
        ├── node_modules
        ├── package.json
        ├── .gitignore
        ├── public
        │   ├── favicon.ico
        │   ├── index.html
        │   ├── logo192.png
        │   ├── logo512.png
        │   ├── manifest.json
        │   └── robots.txt
        └── src
            ├── App.css
            ├── App.js
            ├── App.test.js
            ├── index.css
            ├── index.js
            ├── logo.svg
            ├── serviceWorker.js
            └── setupTests.js
3. JSX Syntax - Writing HTML-like syntax in JavaScript
    - Practice project

    code:
    Profile.js
        ***
            import React from "react";

            const Profile = () => {
                return (
                    <div className='profile'>
                    <p className='name'>Haris</p>
                    <img className='profile-img' src='https://imgd.aeplcdn.com/370x208/n/cw/ec/130591/fronx-exterior-right-front-three-quarter-109.jpeg?isig=0&q=80' alt='' />
                    <p className='about'>I am a developer</p>
                    </div>
                )
            }

            export default Profile;
        ***
    App.js
        ***
            import './App.css';
            import Profile from './components/Profile';

            function App() {
            return (
                <div>
                <h1>Profile</h1>
                <Profile />
                </div>
            );
            }

            export default App;
        ***

    code:
    app.js
    ***
        import './App.css';
        import React, { useState } from 'react';
        import CustomButton from './components/CustomButton';

        function App() {
            const [buttonClicked, setButtonClicked] = useState(false);

            const handleClick = () => {
                setButtonClicked(true);
                alert('Button clicked!');
            };

            return (
                <div className="App">
                    <h1>Welcome to My React App</h1>
                    <CustomButton 
                        text="Click Me" 
                        onClick={handleClick} 
                        className="primary-button" 
                    />
                    {buttonClicked && <p>You've clicked the button!</p>}
                </div>
            );
        }

        export default App;
    ***
    CustomButton.js
    ***
        import React from 'react';

        const CustomButton = ({ text, onClick, disabled, className }) => {
            return (
                <button 
                    className={`custom-button ${className}`} 
                    onClick={onClick} 
                    disabled={disabled}
                >
                    {text}
                </button>
            );
        };

        export default CustomButton;
    ***
4. Components - Introduction to functional components and their structures
    a. Import components
    b. Export components 
5. Props - Passing data to components
6. State - Managing state within components

- Building a Landing Page:

1. Styling Components - Inline styles and CSS files
2. Handling Events - Handling user inputs (clicks, form submissions)
3. Basic Routing with React Router - Introduction to routing and creating a single-page landing page
4. Using Images and Media in React - Embedding and optimizing media
5. Responsive Design - Using CSS frameworks (Bootstrap/Tailwind) for responsiveness

- Activity:

1. Basic Calculator
2. Result Calculator
3. Landing Page
4. Micro Website
5. Website